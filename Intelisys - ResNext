{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":13836,"databundleVersionId":1718836,"sourceType":"competition"}],"dockerImageVersionId":30685,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport math\nimport time\nimport random\nfrom pathlib import Path\nfrom contextlib import contextmanager\nfrom collections import defaultdict, Counter\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom tqdm.auto import tqdm\nfrom functools import partial\n\nimport cv2\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.optim import Adam, SGD\nimport torchvision.models as models\nfrom torch.nn.parameter import Parameter\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, CosineAnnealingLR, ReduceLROnPlateau\n\nfrom albumentations import (\n    Compose, Normalize, Resize, RandomResizedCrop, RandomCrop, HorizontalFlip, VerticalFlip, \n    Rotate, ShiftScaleRotate, Transpose\n    )\nfrom albumentations.pytorch import ToTensorV2\nfrom albumentations import ImageOnlyTransform\n\nimport timm\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-29T19:55:46.327590Z","iopub.execute_input":"2024-04-29T19:55:46.328005Z","iopub.status.idle":"2024-04-29T19:55:46.338450Z","shell.execute_reply.started":"2024-04-29T19:55:46.327974Z","shell.execute_reply":"2024-04-29T19:55:46.337434Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class Config:\n    debug=False\n    print_freq=100\n    num_workers=4\n    model_name='resnext50_32x4d'\n    size=256\n    scheduler='CosineAnnealingWarmRestarts'\n    epochs=5\n    T_0=10\n    lr=1e-4\n    min_lr=1e-6\n    batch_size=32\n    weight_decay=1e-6\n    gradient_accumulation_steps=1\n    max_grad_norm=1000\n    seed=42\n    target_size=5\n    target_col='label'\n    n_fold=5\n    trn_fold=[0, 1, 2, 3, 4]\n    train=True\n    inference=False\n    \nif Config.debug:\n    Config.epochs = 1\n    train = train.sample(n=1000, random_state=Config.seed).reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.350771Z","iopub.execute_input":"2024-04-29T19:55:46.351170Z","iopub.status.idle":"2024-04-29T19:55:46.363578Z","shell.execute_reply.started":"2024-04-29T19:55:46.351144Z","shell.execute_reply":"2024-04-29T19:55:46.362555Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"OUTPUT_DIR = './'\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)\n\nTRAIN_PATH = '../input/cassava-leaf-disease-classification/train_images'\nTEST_PATH = '../input/cassava-leaf-disease-classification/test_images'\n\ntrain = pd.read_csv('../input/cassava-leaf-disease-classification/train.csv')\ntest = pd.read_csv('../input/cassava-leaf-disease-classification/sample_submission.csv')\nlabel_map = pd.read_json('../input/cassava-leaf-disease-classification/label_num_to_disease_map.json', \n                         orient='index')\ndisplay(train.head())\ndisplay(test.head())\ndisplay(label_map)","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.364899Z","iopub.execute_input":"2024-04-29T19:55:46.365237Z","iopub.status.idle":"2024-04-29T19:55:46.441370Z","shell.execute_reply.started":"2024-04-29T19:55:46.365208Z","shell.execute_reply":"2024-04-29T19:55:46.440368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class ResNext(nn.Module):\n    def __init__(self, model_name='resnext50_32x4d', pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        n_features = self.model.fc.in_features\n        self.model.fc = nn.Linear(n_features, Config.target_size)\n\n    def forward(self, x):\n        x = self.model(x)\n        return x","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.444603Z","iopub.execute_input":"2024-04-29T19:55:46.444920Z","iopub.status.idle":"2024-04-29T19:55:46.456013Z","shell.execute_reply.started":"2024-04-29T19:55:46.444896Z","shell.execute_reply":"2024-04-29T19:55:46.455190Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class TrainDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['image_id'].values\n        self.labels = df['label'].values\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_name = self.file_names[idx]\n        file_path = f'{TRAIN_PATH}/{file_name}'\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        label = torch.tensor(self.labels[idx]).long()\n        return image, label\n    \n\nclass TestDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['image_id'].values\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_name = self.file_names[idx]\n        file_path = f'{TEST_PATH}/{file_name}'\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        return image","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.457749Z","iopub.execute_input":"2024-04-29T19:55:46.458486Z","iopub.status.idle":"2024-04-29T19:55:46.471196Z","shell.execute_reply.started":"2024-04-29T19:55:46.458449Z","shell.execute_reply":"2024-04-29T19:55:46.470336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_transforms(*, data):\n    \n    if data == 'train':\n        return Compose([\n            #Resize(Config.size, Config.size),\n            RandomResizedCrop(Config.size, Config.size),\n            Transpose(p=0.5),\n            HorizontalFlip(p=0.5),\n            VerticalFlip(p=0.5),\n            ShiftScaleRotate(p=0.5),\n            Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])\n\n    elif data == 'valid':\n        return Compose([\n            Resize(Config.size, Config.size),\n            Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.472348Z","iopub.execute_input":"2024-04-29T19:55:46.473212Z","iopub.status.idle":"2024-04-29T19:55:46.484159Z","shell.execute_reply.started":"2024-04-29T19:55:46.473182Z","shell.execute_reply":"2024-04-29T19:55:46.483322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_score(y_true, y_pred):\n    return accuracy_score(y_true, y_pred)\n\n\n@contextmanager\ndef timer(name):\n    t0 = time.time()\n    LOGGER.info(f'[{name}] start')\n    yield\n    LOGGER.info(f'[{name}] done in {time.time() - t0:.0f} s.')\n\n\ndef init_logger(log_file=OUTPUT_DIR+'train.log'):\n    from logging import getLogger, INFO, FileHandler,  Formatter,  StreamHandler\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=log_file)\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nLOGGER = init_logger()\n\n\ndef seed_torch(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_torch(seed=Config.seed)","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.485542Z","iopub.execute_input":"2024-04-29T19:55:46.485859Z","iopub.status.idle":"2024-04-29T19:55:46.497699Z","shell.execute_reply.started":"2024-04-29T19:55:46.485830Z","shell.execute_reply":"2024-04-29T19:55:46.496759Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class AverageMeter(object):\n    \"\"\"Computes and stores the average and current value\"\"\"\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum / self.count\n\n\ndef asMinutes(s):\n    m = math.floor(s / 60)\n    s -= m * 60\n    return '%dm %ds' % (m, s)\n\n\ndef timeSince(since, percent):\n    now = time.time()\n    s = now - since\n    es = s / (percent)\n    rs = es - s\n    return '%s (remain %s)' % (asMinutes(s), asMinutes(rs))\n\n\ndef train_fn(train_loader, model, criterion, optimizer, epoch, scheduler, device):\n    batch_time = AverageMeter()\n    data_time = AverageMeter()\n    losses = AverageMeter()\n    scores = AverageMeter()\n    # switch to train mode\n    model.train()\n    start = end = time.time()\n    global_step = 0\n    for step, (images, labels) in enumerate(train_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n        images = images.to(device)\n        labels = labels.to(device)\n        batch_size = labels.size(0)\n        y_preds = model(images)\n        loss = criterion(y_preds, labels)\n        # record loss\n        losses.update(loss.item(), batch_size)\n        if Config.gradient_accumulation_steps > 1:\n            loss = loss / Config.gradient_accumulation_steps\n        if Config.apex:\n            with amp.scale_loss(loss, optimizer) as scaled_loss:\n                scaled_loss.backward()\n        else:\n            loss.backward()\n        grad_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), Config.max_grad_norm)\n        if (step + 1) % Config.gradient_accumulation_steps == 0:\n            optimizer.step()\n            optimizer.zero_grad()\n            global_step += 1\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n        if step % Config.print_freq == 0 or step == (len(train_loader)-1):\n            print('Epoch: [{0}][{1}/{2}] '\n                  'Data {data_time.val:.3f} ({data_time.avg:.3f}) '\n                  'Elapsed {remain:s} '\n                  'Loss: {loss.val:.4f}({loss.avg:.4f}) '\n                  'Grad: {grad_norm:.4f}  '\n                  #'LR: {lr:.6f}  '\n                  .format(\n                   epoch+1, step, len(train_loader), batch_time=batch_time,\n                   data_time=data_time, loss=losses,\n                   remain=timeSince(start, float(step+1)/len(train_loader)),\n                   grad_norm=grad_norm,\n                   #lr=scheduler.get_lr()[0],\n                   ))\n    return losses.avg\n\n\ndef valid_fn(valid_loader, model, criterion, device):\n    batch_time = AverageMeter()\n    data_time = AverageMeter()\n    losses = AverageMeter()\n    scores = AverageMeter()\n    # switch to evaluation mode\n    model.eval()\n    preds = []\n    start = end = time.time()\n    for step, (images, labels) in enumerate(valid_loader):\n        # measure data loading time\n        data_time.update(time.time() - end)\n        images = images.to(device)\n        labels = labels.to(device)\n        batch_size = labels.size(0)\n        # compute loss\n        with torch.no_grad():\n            y_preds = model(images)\n        loss = criterion(y_preds, labels)\n        losses.update(loss.item(), batch_size)\n        # record accuracy\n        preds.append(y_preds.softmax(1).to('cpu').numpy())\n        if Config.gradient_accumulation_steps > 1:\n            loss = loss / Config.gradient_accumulation_steps\n        # measure elapsed time\n        batch_time.update(time.time() - end)\n        end = time.time()\n        if step % Config.print_freq == 0 or step == (len(valid_loader)-1):\n            print('EVAL: [{0}/{1}] '\n                  'Data {data_time.val:.3f} ({data_time.avg:.3f}) '\n                  'Elapsed {remain:s} '\n                  'Loss: {loss.val:.4f}({loss.avg:.4f}) '\n                  .format(\n                   step, len(valid_loader), batch_time=batch_time,\n                   data_time=data_time, loss=losses,\n                   remain=timeSince(start, float(step+1)/len(valid_loader)),\n                   ))\n    predictions = np.concatenate(preds)\n    return losses.avg, predictions\n","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.499124Z","iopub.execute_input":"2024-04-29T19:55:46.499458Z","iopub.status.idle":"2024-04-29T19:55:46.533770Z","shell.execute_reply.started":"2024-04-29T19:55:46.499422Z","shell.execute_reply":"2024-04-29T19:55:46.532810Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_dataset = TrainDataset(train, transform=None)\n\nfor i in range(1):\n    image, label = train_dataset[i]\n    plt.imshow(image)\n    plt.title(f'label: {label}')\n    plt.show() \n    \n\ntrain_dataset = TrainDataset(train, transform=get_transforms(data='train'))\n\nfor i in range(1):\n    image, label = train_dataset[i]\n    plt.imshow(image[0])\n    plt.title(f'label: {label}')\n    plt.show() ","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:46.536000Z","iopub.execute_input":"2024-04-29T19:55:46.536728Z","iopub.status.idle":"2024-04-29T19:55:47.376126Z","shell.execute_reply.started":"2024-04-29T19:55:46.536700Z","shell.execute_reply":"2024-04-29T19:55:47.375004Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = ResNext(model_name=Config.model_name, pretrained=False)\ntrain_dataset = TrainDataset(train, transform=get_transforms(data='train'))\ntrain_loader = DataLoader(train_dataset, batch_size=4, shuffle=True,\n                          num_workers=4, pin_memory=True, drop_last=True)\n\nfor image, label in train_loader:\n    output = model(image)\n    print(output)\n    break","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:47.378101Z","iopub.execute_input":"2024-04-29T19:55:47.378558Z","iopub.status.idle":"2024-04-29T19:55:49.264947Z","shell.execute_reply.started":"2024-04-29T19:55:47.378525Z","shell.execute_reply":"2024-04-29T19:55:49.263755Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"folds = train.copy()\nFold = StratifiedKFold(n_splits=Config.n_fold, shuffle=True, random_state=Config.seed)\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds[Config.target_col])):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)\nprint(folds.groupby(['fold', Config.target_col]).size())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:49.266838Z","iopub.execute_input":"2024-04-29T19:55:49.267746Z","iopub.status.idle":"2024-04-29T19:55:49.293629Z","shell.execute_reply.started":"2024-04-29T19:55:49.267707Z","shell.execute_reply":"2024-04-29T19:55:49.292726Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def train_loop(folds, fold):\n\n    LOGGER.info(f\"========== fold: {fold} training ==========\")\n    \n    #loaders\n    trn_idx = folds[folds['fold'] != fold].index\n    val_idx = folds[folds['fold'] == fold].index\n\n    train_folds = folds.loc[trn_idx].reset_index(drop=True)\n    valid_folds = folds.loc[val_idx].reset_index(drop=True)\n\n    train_dataset = TrainDataset(train_folds, \n                                 transform=get_transforms(data='train'))\n    valid_dataset = TrainDataset(valid_folds, \n                                 transform=get_transforms(data='valid'))\n\n    train_loader = DataLoader(train_dataset, \n                              batch_size=Config.batch_size, \n                              shuffle=True, \n                              num_workers=Config.num_workers, pin_memory=True, drop_last=True)\n    valid_loader = DataLoader(valid_dataset, \n                              batch_size=Config.batch_size, \n                              shuffle=False, \n                              num_workers=Config.num_workers, pin_memory=True, drop_last=False)\n    \n    #scheduler\n    def get_scheduler(optimizer):\n        if Config.scheduler=='ReduceLROnPlateau':\n            scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=Config.factor, patience=Config.patience, verbose=True, eps=Config.eps)\n        elif Config.scheduler=='CosineAnnealingLR':\n            scheduler = CosineAnnealingLR(optimizer, T_max=Config.T_max, eta_min=Config.min_lr, last_epoch=-1)\n        elif Config.scheduler=='CosineAnnealingWarmRestarts':\n            scheduler = CosineAnnealingWarmRestarts(optimizer, T_0=Config.T_0, T_mult=1, eta_min=Config.min_lr, last_epoch=-1)\n        return scheduler\n\n    model = ResNext(Config.model_name, pretrained=True)\n    model.to(device)\n\n    optimizer = Adam(model.parameters(), lr=Config.lr, weight_decay=Config.weight_decay, amsgrad=False)\n    scheduler = get_scheduler(optimizer)\n\n    criterion = nn.CrossEntropyLoss()\n\n    best_score = 0.\n    best_loss = np.inf\n    \n    for epoch in range(Config.epochs):\n        \n        start_time = time.time()\n        \n        # train\n        avg_loss = train_fn(train_loader, model, criterion, optimizer, epoch, scheduler, device)\n\n        # eval\n        avg_val_loss, preds = valid_fn(valid_loader, model, criterion, device)\n        valid_labels = valid_folds[Config.target_col].values\n        \n        if isinstance(scheduler, ReduceLROnPlateau):\n            scheduler.step(avg_val_loss)\n        elif isinstance(scheduler, CosineAnnealingLR):\n            scheduler.step()\n        elif isinstance(scheduler, CosineAnnealingWarmRestarts):\n            scheduler.step()\n\n        # scoring\n        score = get_score(valid_labels, preds.argmax(1))\n\n        elapsed = time.time() - start_time\n\n        LOGGER.info(f'Epoch {epoch+1} - avg_train_loss: {avg_loss:.4f}  avg_val_loss: {avg_val_loss:.4f}  time: {elapsed:.0f}s')\n        LOGGER.info(f'Epoch {epoch+1} - Accuracy: {score}')\n\n        if score > best_score:\n            best_score = score\n            LOGGER.info(f'Epoch {epoch+1} - Save Best Score: {best_score:.4f} Model')\n            torch.save({'model': model.state_dict(), \n                        'preds': preds},\n                        OUTPUT_DIR+f'{Config.model_name}_fold{fold}_best.pth')\n    \n    check_point = torch.load(OUTPUT_DIR+f'{Config.model_name}_fold{fold}_best.pth')\n    valid_folds[[str(c) for c in range(5)]] = check_point['preds']\n    valid_folds['preds'] = check_point['preds'].argmax(1)\n\n    return valid_folds","metadata":{"execution":{"iopub.status.busy":"2024-05-03T23:51:02.894703Z","iopub.execute_input":"2024-05-03T23:51:02.896726Z","iopub.status.idle":"2024-05-03T23:51:02.969034Z","shell.execute_reply.started":"2024-05-03T23:51:02.896657Z","shell.execute_reply":"2024-05-03T23:51:02.966991Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"def main():\n\n    \"\"\"\n    Prepare: 1.train  2.test  3.submission  4.folds\n    \"\"\"\n\n    def get_result(result_df):\n        preds = result_df['preds'].values\n        labels = result_df[Config.target_col].values\n        score = get_score(labels, preds)\n        LOGGER.info(f'Score: {score:<.5f}')\n    \n    if Config.train:\n        # train \n        oof_df = pd.DataFrame()\n        for fold in range(Config.n_fold):\n            if fold in Config.trn_fold:\n                _oof_df = train_loop(folds, fold)\n                oof_df = pd.concat([oof_df, _oof_df])\n                LOGGER.info(f\"========== fold: {fold} result ==========\")\n                get_result(_oof_df)\n        # CV result\n        LOGGER.info(f\"========== CV ==========\")\n        get_result(oof_df)\n        # save result\n        oof_df.to_csv(OUTPUT_DIR+'oof_df.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:49.324456Z","iopub.execute_input":"2024-04-29T19:55:49.324854Z","iopub.status.idle":"2024-04-29T19:55:49.336058Z","shell.execute_reply.started":"2024-04-29T19:55:49.324815Z","shell.execute_reply":"2024-04-29T19:55:49.335131Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if __name__ == '__main__':\n    main()","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:55:49.337199Z","iopub.execute_input":"2024-04-29T19:55:49.337526Z","iopub.status.idle":"2024-04-29T19:56:10.003548Z","shell.execute_reply.started":"2024-04-29T19:55:49.337501Z","shell.execute_reply":"2024-04-29T19:56:10.002184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"torch.save(model.state_dict(), 'resnext_model.pth')\nmodel = ResNext(model_name='resnext50_32x4d', pretrained=True).to(device)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:56:17.035970Z","iopub.execute_input":"2024-04-29T19:56:17.036852Z","iopub.status.idle":"2024-04-29T19:56:17.806232Z","shell.execute_reply.started":"2024-04-29T19:56:17.036817Z","shell.execute_reply":"2024-04-29T19:56:17.805430Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.load_state_dict(torch.load('resnext_model.pth'))","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:56:19.380248Z","iopub.execute_input":"2024-04-29T19:56:19.381211Z","iopub.status.idle":"2024-04-29T19:56:19.464139Z","shell.execute_reply.started":"2024-04-29T19:56:19.381178Z","shell.execute_reply":"2024-04-29T19:56:19.463154Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install torchsummary","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:56:24.077115Z","iopub.execute_input":"2024-04-29T19:56:24.077951Z","iopub.status.idle":"2024-04-29T19:56:35.976969Z","shell.execute_reply.started":"2024-04-29T19:56:24.077918Z","shell.execute_reply":"2024-04-29T19:56:35.975782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from torchsummary import summary\n\n# device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n# model = ResNext(model_name=Config.model_name, pretrained=False).to(device)\n\nsummary(model, (3, 256, 256))","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:59:41.112275Z","iopub.execute_input":"2024-04-29T19:59:41.112659Z","iopub.status.idle":"2024-04-29T19:59:41.158651Z","shell.execute_reply.started":"2024-04-29T19:59:41.112629Z","shell.execute_reply":"2024-04-29T19:59:41.157707Z"},"trusted":true},"execution_count":null,"outputs":[]}]}